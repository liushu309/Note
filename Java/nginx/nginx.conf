
#user  nobody;
#user liushu liushu;
# 一般为电脑核心数的两倍
worker_processes  4;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;


    # 负载均衡组，名称中不能有下划线
    upstream TomcatTest{
        # 轮询策略，Round Robin（轮询，默认是这个） 、ip_hash（ip哈希）、least_conn（最少连接）、weight=n（加权）。除了weight写后面，其它的都是单独的一行写
        # server localhost:8080 weight=1;
        # server localhost:8082 weight=1;

        least_conn;
        server localhost:8080;
        server localhost:8082;
    }

    # https://blog.csdn.net/qq_35760825/article/details/127596936
    # 流量限制
    # limit_req_zone:定义部分使用，binary_remote_addr：变量名，二进制地址，zone=空间名，这里是自己取的名字，也有系统定义的，10m：缓存大小10MB，rate：处理速度（2r/s：2 record per minite），超出处理范围的请求，会被舍弃不处理。
    # limit_req：配合limit_req_zone，在location中使用特定zone中定义的限流规则，burst：放进缓存的请求数，nodelay：可以对缓存中的请求进行处理，不必等到正在处理的单个请求处理完了以后才开始处理。
    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=1r/s;
    #limit_req zone=mylimit burst=5 nodelay;


    # 限制连接数
    limit_conn_zone $binary_remote_addr zone=perip:10m;
    limit_conn_zone $server_name zone=perserver:10m;
    # 表示限制单个IP同时最多能持有10个连接。
    # limit_conn perip 10;
    # 表示虚拟主机(server) 同时能处理并发连接的总数为100
    # limit_conn perserver 100;

    # 白名单，比如进行压力测试的时候可能会用到
    # geo $limit {
    #     default 1;
    #     # 要添加到白名单里的ip和对应的0值
    #     10.0.0.0/8 0;
    #     192.168.0.0/24 0;
    # }

    # map $limit $limit_key {
    #     0 "";
    #     1 $binary_remote_addr;
    # }
    # limit_req_zone可能可以使用下面这一行来替代之前定义的limit_req_zone，也可以将之前定义的和现在定义的，一同加到配置文件里，如果同一个 location 下配置了多条 limit_req 的指令，这些指令所定义的限制都会被使用。
    # limit_req_zone $limit_key zone=mylimit:10m rate=2r/s;


    server {
        # 监听的端口号
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;


        # =  开头表示精确匹配
        # ^~ 开头表示uri以某个常规字符串开头，这个不是正则表达式
        # ~  开头表示区分大小写的正则匹配;
        # ~* 开头表示不区分大小写的正则匹配
        # /  通用匹配, 如果没有其它匹配,任何请求都会匹配到

        # location ~ /documents/Abc {
        # # 匹配任何以 /documents/Abc 开头的地址，匹配符合以后，还要继续往下搜索
        # # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条
        # [ configuration CC ]
        # }

        # location ^~ /images/ {
        # # 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。
        # [ configuration D ]
        # }

        # location ~* \.(gif|jpg|jpeg)$ {
        # # 匹配所有以 gif,jpg或jpeg 结尾的请求
        # # 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则
        # [ configuration E ]
        # }
        location / {
            # root为正则表达式前缀，所以总的路径是ip:port/root/index.html
            root   html;
            # index为服务器没有找到匹配项后的默认网页
            index  index.html index.htm;
        }

        location /test {
            # 匹配后转发，进行负载均衡
            proxy_pass http://TomcatTest; 
            # 正常限流
            limit_req zone=mylimit burst=5 nodelay;
            # 限制连接数
            limit_conn perip 10;
            limit_conn perserver 100;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
